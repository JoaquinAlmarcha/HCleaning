package es.alco.HCleaning;

import java.util.Calendar;


import es.alco.HCleaning.types.Actuator;
import es.alco.HCleaning.types.Actuator_Value;
import es.alco.HCleaning.types.Device;
import es.alco.HCleaning.types.Room;
import es.alco.HCleaning.types.Sensor;
import es.alco.HCleaning.types.Sensor_Value;
import es.alco.HCleaning.types.Surgery;
import es.alco.HCleaning.types.User;
import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.http.HttpServer;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mqtt.impl.MqttClientImpl;
import io.vertx.mysqlclient.MySQLClient;
import io.vertx.mysqlclient.MySQLConnectOptions;
import io.vertx.mysqlclient.MySQLPool;
import io.vertx.sqlclient.PoolOptions;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.RowSet;
import io.vertx.sqlclient.Tuple;


public class DDBBServerVerticle extends AbstractVerticle {
	
	private MySQLPool mySQLPool;
	private String classInstanceId;
	private MqttClient mqttClient;
	
	
	@Override
	public void start(Promise<Void> startPromise) {

		/*
		 * 
		 *  						CONEXION MYSQL
		 *  
		 *  																	*/ 
		MySQLConnectOptions mySQLConnectOptions = new MySQLConnectOptions()
				.setPort(3306)
				.setHost("localhost")
				.setDatabase("daddb")
				.setUser("root")
				.setPassword("rootroot");
		PoolOptions poolOptions = new PoolOptions().setMaxSize(5);
		
		mySQLPool = MySQLPool.pool(vertx, mySQLConnectOptions, poolOptions);

		//Definicion del router
		Router router = Router.router(vertx);
		router.route().handler(BodyHandler.create());
		
		//Handler del servidor HTTP para la conexion con la base de datos
		HttpServer httpServer = vertx.createHttpServer();
		httpServer.requestHandler(router::handle).listen(8080, result -> {
			if (result.succeeded()) {
				startPromise.complete();
				System.out.println("Conexion con la BBDD satisfactoria");
			} else {
				startPromise.fail(result.cause());
				System.out.println("Conexion con la BBDD fallida");
			}
		});
		
		
		/*
		 * 					  ROUTER METODOS REST
		 * 
		 * 
		 *  						  GET
		 *  
		 *  																	*/ 
		
		router.get("/api/user/:idUser").handler(this::getUser);
		router.get("/api/userDni/:dni").handler(this::getUserDni);
		
		router.get("/api/device/:idDevice").handler(this::getDevice);
		router.get("/api/deviceOf/:idRoom").handler(this::getDeviceRoom);
		router.get("/api/sensorOf/:idDevice").handler(this::getSensorDevice);
		router.get("/api/actuatorOf/:idDevice").handler(this::getActuatorDevice);
		
		router.get("/api/sensor/values/:idSensor").handler(this::getSensorValues);
		router.get("/api/actuator/values/:idActuator").handler(this::getActuatorValues);
		
		router.get("/api/surgery/:idSurgery").handler(this::getSurgery);
		router.get("/api/surgery/:idSurgery/:timestampStart").handler(this::getSurgery);
		router.get("/api/surgery/:idSurgery/:timestampStart/:idRoom").handler(this::getSurgery);
		router.get("/api/surgery/:idSurgery/:idRoom").handler(this::getSurgery);
		router.get("/api/scheduleSurgery/:timestampStart").handler(this::getScheduleSurgery);
		
		/*
		 * 
		 *  						  POST
		 *  
		 *  																	*/ 
		router.post("/api/user/new").handler(this::postUser);
		router.post("/api/device/new").handler(this::postDevice);
		
		router.post("/api/sensor/values/:idSensor").handler(this::postSensorValues);
		router.post("/api/actuator/values/:idActuator").handler(this::postActuatorValues);
		
		router.post("/api/surgery/new").handler(this::postSurgery);
		router.post("/api/login").handler(this::postLogin);
		
		/*
		 * 
		 *  						  PUT
		 *  
		 *  																	*/ 
		router.put("/api/user/:idUser").handler(this::putUser);
		router.put("/api/surgery/:idSurgery").handler(this::putSurgery);
		
		/*
		 * 
		 *  						DELETE
		 *  
		 *  																	*/ 
		router.delete("/api/surgery/:idSurgery").handler(this::deleteSurgery);
		
		
		/*
		 * 
		 *  					 CLIENTE MQTT
		 *  
		 *  																	*/ 
		classInstanceId = this.hashCode() + "";
		MqttClientOptions options = new MqttClientOptions();
		options.setAutoKeepAlive(true);
		options.setAutoGeneratedClientId(false);
		options.setClientId(classInstanceId);
		options.setConnectTimeout(5000);
		options.setCleanSession(true);
		options.setKeepAliveTimeSeconds(10000);
		options.setReconnectAttempts(10);
		options.setReconnectInterval(5000);
		options.setUsername("admin");
		options.setPassword("admin");
		mqttClient = new MqttClientImpl(vertx, options);
		
		mqttClient.publishHandler(messageReceivedHandler -> {
			System.out.println(messageReceivedHandler.payload().toString());
		});
		
		
		mqttClient.connect(1884, "localhost", handler -> { 
			if(handler.result().code() == MqttConnectReturnCode.CONNECTION_ACCEPTED) {
				
			/*
				 *		TOPICS: PURIFICADOR, LED, AC
				 * 
				 * 		Cada vez que se realiza un post en la base de datos
				 *      se envia un mensaje al cliente MQTT informando del estado
				 *      del actuador (ACTIVO/INACTIVO) permitiendo de esta manera
				 *      la activacion/desactivacion manual de los actuadores
			 *        
			 *  																	*/ 
				
				//PURIFIER TOPIC
				mqttClient.subscribe(MQTTServerVerticle.TOPIC_PURIFIER, MqttQoS.AT_LEAST_ONCE.value(), handlerSubscribe -> {
					if(handlerSubscribe.succeeded()) {
						System.out.println(classInstanceId + " suscrito a " + MQTTServerVerticle.TOPIC_PURIFIER + " channel");
						
						
					}else {
						System.out.println(classInstanceId + " no suscrito a " + MQTTServerVerticle.TOPIC_PURIFIER + " channel");
					}
				});
				
				//AC TOPIC
				mqttClient.subscribe(MQTTServerVerticle.TOPIC_AC, MqttQoS.AT_LEAST_ONCE.value(), handlerSubscribe -> {
					if(handlerSubscribe.succeeded()) {
						System.out.println(classInstanceId + " suscrito a " + MQTTServerVerticle.TOPIC_AC + " channel");
						
						
					}else {
						System.out.println(classInstanceId + " no suscrito a " + MQTTServerVerticle.TOPIC_AC + " channel");
					}
				});
				
				//LED TOPIC
				mqttClient.subscribe(MQTTServerVerticle.TOPIC_LED, MqttQoS.AT_LEAST_ONCE.value(), handlerSubscribe -> {
					if(handlerSubscribe.succeeded()) {
						System.out.println(classInstanceId + " suscrito a " + MQTTServerVerticle.TOPIC_LED + " channel");
						
						
					}else {
						System.out.println(classInstanceId + " no suscrito a " + MQTTServerVerticle.TOPIC_LED + " channel");
					}
				});
				
			} else {
				System.out.println("Error: " + handler.result().code().toString());
			}
		});
	}
	
	
	
	/*
	 * 
	 *  					 METODOS REST
	 *  
	 *  																	*/ 
	
	
	/*
	 * 
	 *  					 	  GET
	 *  
	 *  																	*/ 
	
	//GET-USER : Devuelve la información de los usuarios registrados. (Parametro = idUser)
	private void getUser(RoutingContext routingContext) {		
		mySQLPool.query("SELECT * FROM user WHERE idUser = '" + routingContext.request().getParam("idUser") + "'",
				res -> {
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (User: " + routingContext.request().getParam("idUser") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom( new User(row.getInteger("idUser"),
											row.getString("DNI"),
											row.getString("Name"),
											row.getString("Address"),
											row.getString("Email"),
											row.getString("Tlf"),
											row.getString("Password"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					} else {
						
						System.out.println("Consulta fallida (User: " + routingContext.request().getParam("idUser") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	//GET-USER-DNI : Devuelve la información de los usuarios por su DNI. (Parametro = DNI)
	private void getUserDni(RoutingContext routingContext) {		
		mySQLPool.query("SELECT * FROM user WHERE DNI = '" + routingContext.request().getParam("DNI") + "'",
				res -> {
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (User: " + routingContext.request().getParam("DNI") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom( new User(row.getInteger("idUser"),
											row.getString("DNI"),
											row.getString("Name"),
											row.getString("Address"),
											row.getString("Email"),
											row.getString("Tlf"),
											row.getString("Password"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					} else {
						
						System.out.println("Consulta fallida (User: " + routingContext.request().getParam("DNI") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
			
	//GET-DEVICE : Devuelve la información de un dispositivo filtrado por su ID. (Parametro = idDevice)
	private void getDevice(RoutingContext routingContext) {		
		mySQLPool.query("SELECT * FROM daddb.device WHERE idDevice = " + routingContext.request().getParam("idDevice"),
				res -> {
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Device: " + routingContext.request().getParam("idDevice") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Device(row.getInteger("idDevice"),
									row.getString("IP"),
									row.getString("Name"),
									row.getInteger("idRoom"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json; charset=utf-8")
								.end(result.encodePrettily());
						
					} else {
						
						System.out.println("Consulta fallida (Device: " + routingContext.request().getParam("idDevice") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	//GET-DEVICE :  Devuelve la información de un dispositivo filtrado por salas.  (Parametro = idRoom)
	private void getDeviceRoom(RoutingContext routingContext) {  
		mySQLPool.query("SELECT * FROM device WHERE idRoom = " + routingContext.request().getParam("idRoom"), 
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Dispositivo: " + routingContext.request().getParam("idDevice")
								+ "perteneciente a la sala"+ routingContext.request().getParam("idRoom") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Device(row.getInteger("idDevice"),
									row.getString("IP"),
									row.getString("Name"),
									row.getInteger("idRoom"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					}else {
							
						System.out.println("Consulta fallida (Dispositivo: " + routingContext.request().getParam("idDevice") 
								+ "perteneciente a la sala"+ routingContext.request().getParam("idRoom") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
		
	//GET-SENSOR-DEVICE : Devuelve la información de todos los sensores asociados a un dispositivo. (Parametro = idDevice)
	private void getSensorDevice(RoutingContext routingContext) {  
		mySQLPool.query("SELECT * FROM daddb.sensor WHERE idDevice = " + routingContext.request().getParam("idDevice"), 
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Sensor: " + routingContext.request().getParam("idDevice") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Sensor(row.getInteger("idSensor"),
									row.getString("Name"),
									row.getInteger("idDevice"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					}else {
							
						System.out.println("Consulta fallida (Sensor: " + routingContext.request().getParam("idDevice") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	//GET-ACTUATOR-DEVICE : Devuelve la información de todos los actuadores asociados a un dispositivo. (Parametro = idDevice)
	private void getActuatorDevice(RoutingContext routingContext) {  
		mySQLPool.query("SELECT * FROM actuator WHERE idDevice = " + routingContext.request().getParam("idDevice"), 
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Actuator: " + routingContext.request().getParam("idDevice") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Sensor(row.getInteger("idActuator"),
									row.getString("Name"),
									row.getInteger("idDevice"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					}else {
							
						System.out.println("Consulta fallida (Actuator: " + routingContext.request().getParam("idDevice") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	//GET-SENSOR_VALUES : Devuelve la informacion de un sensor. (Parametro = idSensor)
	private void getSensorValues(RoutingContext routingContext) { 
		mySQLPool.query("SELECT * FROM daddb.sensor_value WHERE idSensor = " + routingContext.request().getParam("idSensor"), 
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						for (Row row : resultSet) {
							
							result.add(JsonObject.mapFrom(new Sensor_Value(row.getInteger("idSensor_Value"),
									row.getFloat("Value"),
									row.getString("Type"),
									row.getLong("Timestamp"),
									row.getInteger("idSensor"))));
						}
						
							routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
							.end(result.encodePrettily());
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}

	//GET-ACTUATOR_VALUES : Devuelve la informacion de un actuador. (Parametro = idActuador)
	private void getActuatorValues(RoutingContext routingContext) { 
		mySQLPool.query("SELECT * FROM daddb.actuator_value WHERE idActuator = " + routingContext.request().getParam("idActuator"), 
				res -> {
					if (res.succeeded()) {	
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						for (Row row : resultSet) {
							
							result.add(JsonObject.mapFrom(new Actuator_Value(row.getInteger("idActuator_Value"),
									row.getInteger("Mode"),
									row.getString("Type"),
									row.getLong("Timestamp"),
									row.getInteger("idActuator"))));
							
						}
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
						.end(result.encodePrettily());
					}else{
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}
	
	//GET-SURGERY : Devuelve la información de las operaciones con sus respectivos filtros. (Parametros = idSurgery, TimestampStart, idRoom)
	private void getSurgery(RoutingContext routingContext) {
		String query;
		if(routingContext.request().getParam("TimestampStart")==null && routingContext.request().getParam("idRoom")==null) {
			query="SELECT * FROM surgery WHERE idSurgery = " + routingContext.request().getParam("idSurgery");
			
		}else if(routingContext.request().getParam("TimestampStart")!=null && routingContext.request().getParam("idRoom")==null){
			query="SELECT * FROM surgery WHERE TimestampStart = " + routingContext.request().getParam("TimestampStart") + 
				" AND idSurgery = " + routingContext.request().getParam("idSurgery");
							
		}else if(routingContext.request().getParam("TimestampStart")==null && routingContext.request().getParam("idRoom")!=null){
			query="SELECT * FROM surgery WHERE idRoom = " + routingContext.request().getParam("idRoom") +
				" AND idSurgery = " + routingContext.request().getParam("idSurgery");
			
		}else {
			query="SELECT * FROM surgery WHERE TimestampStart = " + routingContext.request().getParam("TimestampStart") + 
					" AND idRoom = " + routingContext.request().getParam("idRoom") +
					" AND idSurgery = " + routingContext.request().getParam("idSurgery");
		}
		mySQLPool.query(query, res -> {
				
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Surgery: " + routingContext.request().getParam("idSurgery") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Surgery(row.getInteger("idSurgery"),
									row.getLong("TimestampStart"),
									row.getLong("TimestampEnd"),
									row.getInteger("idRoom"))));
							
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					} else {
						
						System.out.println("Consulta fallida (Surgery: " + routingContext.request().getParam("idSurgery") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
	}

	//GET-SCHEDULE-SURGERY : Devuelve la información de las operaciones programadas para un dia especifico. (Parametro = TimestampStart)
	private void getScheduleSurgery(RoutingContext routingContext) {
		String query;										 	
		query="SELECT * FROM surgery WHERE DATE(TimestampStart) = " + routingContext.request().getParam("DATE(TimestampStart)");
		mySQLPool.query(query, res -> {
				
					if (res.succeeded()) {
						RowSet<Row> resultSet = res.result();
						JsonArray result = new JsonArray();
						
						System.out.println("Consulta satisfactoria (Surgery: " + routingContext.request().getParam("idSurgery") + ")");
						
						for (Row row : resultSet) {
							result.add(JsonObject.mapFrom(new Surgery(row.getInteger("idSurgery"),
									row.getLong("TimestampStart"),
									row.getLong("TimestampEnd"),
									row.getInteger("idRoom"))));
						}
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(result.encodePrettily());
						
					} else {
						
						System.out.println("Consulta fallida (Surgery: " + routingContext.request().getParam("idSurgery") + ")");
						
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(res.cause()).encodePrettily()));
					}
				});
		}
	
	
	/*
	 * 
	 *  					 	  POST
	 *  
	 *  																	*/ 
	
	//POST-USER : Inserta un nuevo usuario.
	private void postUser(RoutingContext routingContext) {
		User user = Json.decodeValue(routingContext.getBodyAsString(), User.class);	
		
		mySQLPool.preparedQuery("INSERT INTO User (idUser, "
									+ "DNI, "
									+ "Name, "
									+ "Address, "
									+ "Email, "
									+ "Tlf, "
									+ "Password) "
									+ "VALUES (?,?,?,?,?,?,?)",
									
					Tuple.of(user.getIduser(),
							user.getDNI(),
							user.getName(), 
							user.getAddress(),
							user.getEmail(),
							user.getTlf(),
							user.getPassword()),

				handler -> {
					
					if (handler.succeeded()) {
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(user).encodePrettily());
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}

	//POST-DEVICE : Inserta un nuevo dispositivo.
	private void postDevice(RoutingContext routingContext) {
		
		Device device = Json.decodeValue(routingContext.getBodyAsString(), Device.class);	
		mySQLPool.preparedQuery("INSERT INTO Device (idDevice, "
									+ "IP, "
									+ "Name, "
									+ "idRoom) "
									+ "VALUES (?,?,?,?)",
									
					Tuple.of(device.getIdDevice(),
							device.getIp(),
							device.getName(), 
							device.getIdRoom()),

				handler -> {
					
					if (handler.succeeded()) {
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(device).encodePrettily());
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	//POST-SENSOR-VALUES : Inserta los valores de un sensor
	private void postSensorValues(RoutingContext routingContext) { 

		Sensor_Value sensor_value = Json.decodeValue(routingContext.getBodyAsString(), Sensor_Value.class);	
		mySQLPool.preparedQuery("INSERT INTO sensor_value (Value, "
						+ "Type, "
						+ "Timestamp, "
						+ "idSensor) "
						+ "VALUES (?,?,?,?)",
						
				Tuple.of(sensor_value.getValue(), 
						sensor_value.getType(),
						Calendar.getInstance().getTimeInMillis(),
						routingContext.request().getParam("idSensor")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(sensor_value).encodePrettily());
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	//POST-ACTUATOR-VALUES : Inserta los valores de un actuador
	private void postActuatorValues(RoutingContext routingContext) {
		Actuator_Value actuator_value = Json.decodeValue(routingContext.getBodyAsString(), Actuator_Value.class);	
		mySQLPool.preparedQuery("INSERT INTO actuator_value (Mode, "
						+ "Type, "
						+ "Timestamp, "
						+ "idActuator) "
						+ "VALUES (?,?,?,?)",
						
				Tuple.of(actuator_value.getMode(), 
						actuator_value.getType(),
						Calendar.getInstance().getTimeInMillis(),
						routingContext.request().getParam("idActuator")),
				handler -> {
					
					if (handler.succeeded()) {
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(actuator_value).encodePrettily());
							if(routingContext.request().getParam("Type") == "Purifier") {
								mqttClient.publish(MQTTServerVerticle.TOPIC_PURIFIER,
									Buffer.buffer(JsonObject.mapFrom(actuator_value).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
							}else if(routingContext.request().getParam("Type") == "AC") {
								mqttClient.publish(MQTTServerVerticle.TOPIC_AC,
										Buffer.buffer(JsonObject.mapFrom(actuator_value).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
							}else if(routingContext.request().getParam("Type") == "Led") {
								mqttClient.publish(MQTTServerVerticle.TOPIC_LED,
										Buffer.buffer(JsonObject.mapFrom(actuator_value).encodePrettily()), MqttQoS.AT_LEAST_ONCE, false, false);
							}
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}

	//POST-SURGERY : Inserta una nueva operación.
	private void postSurgery(RoutingContext routingContext) {
		
		Surgery surgery = Json.decodeValue(routingContext.getBodyAsString(), Surgery.class);	
		mySQLPool.preparedQuery("INSERT INTO Surgery (idSurgery, "
									+ "TimestampStart, "
									+ "TimestampEnd, "
									+ "idRoom) "
									+ "VALUES (?,?,?)",
									
					Tuple.of(surgery.getIdSurgery(),
							surgery.getTimestampStart(),
							surgery.getTimestampEnd(),
							surgery.getIdRoom()),

				handler -> {
					
					if (handler.succeeded()) {
						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(surgery).encodePrettily());
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	//POST-LOGIN : Se consulta si el usuario y contraseña proporcionados por el cliente coinciden con un cliente registrado.
	private void postLogin(RoutingContext routingContext) { 
		mySQLPool.query( "SELECT * FROM user WHERE idUser = '" + routingContext.getBodyAsJson().getString("idUser") + 
				"' AND Password = '" + routingContext.getBodyAsJson().getString("Password") + "'", 
				res -> {
					if (res.succeeded()) {
						if(res.result().size() == 1) {
							routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
							.end("Bienvenido!");
						}else {
							routingContext.response().setStatusCode(201).putHeader("content-type", "application/json")
							.end("Usuario y/o contraseña incorrectos");
						}
					}else {
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
						.end("Fallo al conectar");
					}
				});
	}
	
	/*
	 * 
	 *  					 	  PUT
	 *  
	 *  																	*/ 
	
	//PUT-USER : Actualizar un usuario
	private void putUser(RoutingContext routingContext) {
		User user = Json.decodeValue(routingContext.getBodyAsString(), User.class);
		System.out.println(user.toString());
		mySQLPool.preparedQuery(
					"UPDATE USER SET DNI = ?, "
							+ "Name = ?, "
							+ "Address = ?, "
							+ "Email = ?, "
							+ "Tlf = ?, "
							+ "Password = ?) "
							+ "WHERE idUser = ?",
							
					Tuple.of(user.getDNI(), 
							user.getName(), 
							user.getAddress(),
							user.getEmail(), 
							user.getTlf(), 
							user.getPassword(), 
							routingContext.request().getParam("idUser")),
					
					handler -> {
						if (handler.succeeded()) {
							System.out.println("Usuario actualizado correctamente");
	
							routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
									.end(JsonObject.mapFrom(user).encodePrettily());
							
						} else {
							System.out.println("Algo ha fallado al actualizar el usuario");
							System.out.println(handler.cause().toString());
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
									.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
						}
					});
	}
	
	//SURGERY-PUT : Actualizar una operación
	private void putSurgery(RoutingContext routingContext) {
	    Surgery surgery = Json.decodeValue(routingContext.getBodyAsString(), Surgery.class);
	    mySQLPool.preparedQuery(
	    		"UPDATE Surgery SET TimestampStart = ?, "
	    				+ "TimestampEnd = ?, "
						+ "idRoom = ?) "
						+ "WHERE idSurgery = ?",
						
				Tuple.of(surgery.getTimestampStart(),
						surgery.getTimestampEnd(),
						surgery.getIdRoom(), 
						routingContext.request().getParam("idSurgery")),
				
				handler -> {
					if (handler.succeeded()) {
						System.out.println("Operación actualizada correctamente");

						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end(JsonObject.mapFrom(surgery).encodePrettily());
						
					} else {
						System.out.println("Algo ha fallado al actualizar la operación");
						System.out.println(handler.cause().toString());
						routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
								.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
	
	/*
	 * 
	 *  					 	  DELETE
	 *  
	 *  																	*/ 
	
	private void deleteSurgery(RoutingContext routingContext) {
		
		mySQLPool.query("DELETE FROM Surgery WHERE idSurgery =  " + routingContext.request().getParam("idSurgery"),
				handler -> {
					
					if (handler.succeeded()) {						
						routingContext.response().setStatusCode(200).putHeader("content-type", "application/json")
								.end("Usuario borrado correctamente");
						
						}else {
							routingContext.response().setStatusCode(401).putHeader("content-type", "application/json")
							.end((JsonObject.mapFrom(handler.cause()).encodePrettily()));
					}
				});
	}
}
